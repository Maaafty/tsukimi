name: Windows
on:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  build-release:
    name: Build (${{ matrix.msystem }})
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_DIRECT: false
      SCCACHE_DIR: ${{ github.workspace }}\.sccache
      SCCACHE_IDLE_TIMEOUT: 0
    strategy:
      matrix:
        include:
          - arch: ucrt64-x86_64-windows-gnu
            target: x86_64-pc-windows-gnu
            msystem: ucrt64
            env: ucrt-x86_64

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup msys2
        uses: msys2/setup-msys2@v2
        with:
          update: false
          install: false
          msystem: ${{ matrix.msystem }}

      - name: Install packages with retry
        shell: msys2 {0}
        run: |
          # 配置pacman使用更可靠的设置
          sed -i 's/#ParallelDownloads = 5/ParallelDownloads = 3/' /etc/pacman.conf
          sed -i 's/#XferCommand/XferCommand/' /etc/pacman.conf
          sed -i 's/XferCommand = \/usr\/bin\/curl -L -C - -f -o %o %u/XferCommand = \/usr\/bin\/curl --connect-timeout 60 --max-time 300 -L -C - -f -o %o %u/' /etc/pacman.conf
          
          # 强制刷新包数据库
          pacman -Syy --noconfirm
          
          # 分批安装基础包（最小集合）
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gcc
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-pkgconf
          
          # 安装GTK相关
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gtk4
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-libadwaita
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-glib2
          
          # 安装GStreamer（分开安装避免大包下载失败）
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gstreamer
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gst-plugins-base
          
          # 尝试安装其他插件，如果失败就跳过
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gst-plugins-good || echo "gst-plugins-good failed, continuing..."
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gst-plugins-bad || echo "gst-plugins-bad failed, continuing..."
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gst-plugins-ugly || echo "gst-plugins-ugly failed, continuing..."
          pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-gst-libav || echo "gst-libav failed, continuing..."
        
          
          # 安装其他必需工具
          pacman -S --noconfirm --needed curl

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.sccache
            ${{ github.workspace }}/target
          key: tsukimi-build-${{ matrix.arch }}-windows-${{ hashFiles('Cargo.toml', '*/Cargo.toml') }}
          restore-keys: |
            tsukimi-build-${{ matrix.arch }}-windows-

      - name: Setup sccache
        run: |
          choco install sccache
          sccache --start-server
          sccache -z
          sccache -s

      - name: Install MPV from MSYS2
        shell: msys2 {0}
        run: |
            echo "=== Installing MPV from MSYS2 ==="
            
            # 安装MPV开发库
            pacman -S --noconfirm --needed mingw-w64-${{ matrix.env }}-mpv
            
            # 验证安装
            echo "=== Verifying MPV installation ==="
            ls -la /${{ matrix.msystem }}/lib/ | grep -i mpv || echo "No mpv lib files"
            ls -la /${{ matrix.msystem }}/include/ | grep -i mpv || echo "No mpv include files"
            
            # 检查关键文件
            if [ -f "/${{ matrix.msystem }}/lib/libmpv.dll.a" ]; then
              echo "✅ libmpv.dll.a found"
            else
              echo "❌ libmpv.dll.a NOT found"
              echo "Available lib files:"
              find /${{ matrix.msystem }}/lib/ -name "*mpv*" -type f
            fi
            
            # 测试pkg-config
            pkg-config --exists mpv && echo "✅ mpv pkg-config OK" || echo "❌ mpv pkg-config failed"
            
            echo "=== MPV installation completed ==="

      - name: Build tsukimi-${{ matrix.target }}
        shell: msys2 {0}
        env:
          DANDANAPI_SECRET_KEY: ${{ secrets.DANDANAPI_SECRET_KEY }}
        run: |
          export PATH="/c/ProgramData/chocolatey/bin:/c/Users/runneradmin/.cargo/bin:$PATH"
          rustup default nightly-gnu
          echo $DANDANAPI_SECRET_KEY > secret/key
          cargo build --release --locked

      - name: Prepare Package
        shell: msys2 {0}
        run: |
          mkdir artifact && cd artifact
          mkdir tsukimi-x86_64-windows-gnu/ && cd tsukimi-x86_64-windows-gnu/ && mkdir bin/ && mkdir share/ && mkdir lib/
          cp $GITHUB_WORKSPACE/target/release/tsukimi.exe bin/
          cp /${{ matrix.msystem }}/bin/gdbus.exe bin/

          cp -r /${{ matrix.msystem }}/lib/gdk-pixbuf-2.0 lib/
          find lib/gdk-pixbuf-2.0/2.10.0/loaders -type f ! -name "*.dll" -exec rm -f "{}" \;

          cp -r /${{ matrix.msystem }}/lib/gio lib/

          cp -r /${{ matrix.msystem }}/lib/gstreamer-1.0 lib/ && find lib/gstreamer-1.0 -type f ! -name "*.dll" -exec rm -f "{}" \;

          cp -r $GITHUB_WORKSPACE/i18n/locale share/

          cp -r /${{ matrix.msystem }}/share/glib-2.0 share/
          find share/glib-2.0/* -maxdepth 0 -type d ! -name "*schemas*" -exec rm -rf "{}" \;
          mv $GITHUB_WORKSPACE/resources/moe.tsuna.tsukimi.gschema.xml share/glib-2.0/schemas/
          glib-compile-schemas.exe share/glib-2.0/schemas/
          find share/glib-2.0/ -type f ! -name "*.compiled" -exec rm -f "{}" \;

          cp -r /${{ matrix.msystem }}/share/icons share/
          cp $GITHUB_WORKSPACE/resources/icons/moe.tsuna.tsukimi.png share/icons/
          rm -rf share/icons/hicolor && rm -rf share/icons/AdwaitaLegacy && rm -rf share/icons/Adwaita/scalable && rm -rf share/icons/Adwaita/cursors
          rm -rf share/icons/Adwaita/16x16 && rm -rf share/icons/Adwaita/symbolic-up-to-32

          find . -type d -empty -delete

          cd lib/gstreamer-1.0 
          rm -f \
            libgstadpcmenc.dll libgstamfcodec.dll libgstdvbsubenc.dll libgstencoding.dll \
            libgstfrei0r.dll libgstinter.dll libgstlame.dll libgstldac.dll libgstmpeg2enc.dll \
            libgstmpegpsmux.dll libgstmpegtsmux.dll libgstmplex.dll libgstrealmedia.dll \
            libgstsubenc.dll libgstsvtav1.dll libgstsvthevcenc.dll libgsttwolame.dll \
            libgstvoamrwbenc.dll libgstwavenc.dll libgstx264.dll libgstx265.dll \
            libgstxingmux.dll libgsty4menc.dll libgstzbar.dll

          cd $GITHUB_WORKSPACE/artifact/tsukimi-x86_64-windows-gnu
          ldd bin/tsukimi.exe | grep '\/${{ matrix.msystem }}.*\.dll' -o | xargs -I{} cp -n "{}" bin/
          find lib/ -type f -name "*.dll" -exec ldd "{}" \; | grep '\/${{ matrix.msystem }}.*\.dll' -o | xargs -I{} cp -n "{}" bin/

      - name: Create NSIS installer
        shell: powershell
        run: |
          cp ./installer/* artifact
          makensis /V4 artifact/tsukimi_installer.nsi
          rm artifact/tsukimi_installer.nsi

      - name: Build Thin Package
        shell: powershell
        run: |
          cd artifact/tsukimi-x86_64-windows-gnu
          7z.exe a ../tsukimi-${{matrix.arch}}.7z ./*

      - name: Calculate Checksum
        shell: msys2 {0}
        run: |
          cd artifact
          sha512sum *.7z > tsukimi.sha512sum
          sha512sum *.exe >> tsukimi.sha512sum

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tsukimi-${{matrix.target}}
          path: |
            artifact/*.exe
            artifact/*.7z
            artifact/*.sha512sum
          compression-level: 0
          if-no-files-found: error

      - name: Post Setup sccache
        run: |
          sccache -s
          sccache --stop-server
